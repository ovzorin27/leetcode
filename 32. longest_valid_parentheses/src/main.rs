use std::collections::HashSet;

fn main() {
    println!("{}", Solution::longest_valid_parentheses(")(()(()(((())(((((()()))((((()()(()()())())())()))()()()())(())()()(((()))))()((()))(((())()((()()())((())))(())))())((()())()()((()((())))))((()(((((()((()))(()()(())))((()))()))())".to_string()));
}

struct Solution;

impl Solution {
    /*
    Runtime: 0 ms, faster than 100.00% of Rust online submissions for Longest Valid Parentheses.
Memory Usage: 2.1 MB, less than 91.30% of Rust online submissions for Longest Valid Parentheses.
     */
    pub fn longest_valid_parentheses(s: String) -> i32 {
        if s.is_empty() {
            return 0;
        }

        let mut max_len = 0;
        let mut vec: Vec<i32> = Vec::with_capacity(s.len());
        vec.push(-1);

        for (i, &b) in s.as_bytes().iter().enumerate() {
            match b {
                b'(' => {
                    vec.push(i as i32);
                },
                b')' => {
                    vec.pop();
                    if vec.is_empty() {
                        vec.push(i as i32);
                    } else {
                        let len = i as i32 - vec.last().unwrap();
                        max_len = max_len.max(len);
                    }
                }
                _ => panic!("wrong symbol")
            }
        }

        max_len as i32
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    pub fn test1() {
        assert_eq!(Solution::longest_valid_parentheses("(()".to_string()), 2)
    }

    #[test]
    pub fn test2() {
        assert_eq!(Solution::longest_valid_parentheses(")()())".to_string()), 4)
    }

    #[test]
    pub fn test3() {
        assert_eq!(Solution::longest_valid_parentheses("".to_string()), 0);
    }

    #[test]
    pub fn test4() {
        assert_eq!(Solution::longest_valid_parentheses(")(()(()(((())(((((()()))((((()()(()()())())())()))()()()())(())()()(((()))))()((()))(((())()((()()())((())))(())))())((()())()()((()((())))))((()(((((()((()))(()()(())))((()))()))())".to_string()), 132);
    }

    #[test]
    pub fn test5() {
        assert_eq!(Solution::longest_valid_parentheses("(()(()()()(()())()(()()))()()())()(((()())((())(()()((()((((())(())()()(())()(()(()(())))))))(()()()))()()))))))(()())))((())())))()(((()(()))())((())))(())(((()()))))())))((()((()()(()))())(()))(())((())()(((()(((()))))()))()()())()()()(()(()(()()()(()(())(())))())()))())(())((())(()((((())((())((())(()()(((()))(()(((())())()(())))(()))))))(()(()(()))())(()()(()(((()()))()(())))(()()(())))))(()(()()())))()()())))))((())(()()(((()(()()))(())))(((()))())())())(((()((()((()())((()))(()()((()(())())(()))()())())))))()(()())))()()))(((()(()))((()((((())((())))((())()()))())()(((()()(((()))))))(((()))()(()(((())(())()()()))))()))()))))()(()))()()()))))()(()))()()(()())))(()))()())(())()())(())()()))(()())))((()())))())))))((()))())()()))))()))(((())(())()))()()((()))(((()))))((()((()))(())(((()))()()()())())())))(()(((())()())(())(((()()((())()))(()()(((())))((()(((()))(((((()(((())())))(())(()()((()(()(())())(((((())((()()))())(()())))()()()(()(((((((())))(()()()()((()(((())())())())))())())())))()((((())(((()()()())()))()()(()(()()))()))(())(()())))))()())()())))()()(())))))))((())()()(((()))()))())))))((()())((()())(((())()())()))(()(()()(((()(())()))()())()()(())()(()))))()))()()))))(())(()()(())((()))(()))((())))))(())))()))(()()(())))())()((())()))((()()(()())()()(()))())(((())()(((()((())()(()()()((()(()())(()())())((((())))())())))(()))(((())((()))))((()()(((())((())()()()))((()())()()())())))))((((()((()())))(())(())()()()(((((())())()()()(())())()((()(()())(((())((((()((()(((()))(()()))())()()(()(()(())))()))())))(()()(()))))))(()()())()()))()(())()(".to_string()), 296);
    }
}